packages:
  physical_uart: !include device_physical_uart.yaml    
  i2c1: !include device_i2c1.yaml
  device_sx1509: !include device_sx1509.yaml

# Status Binary Sensor: https://esphome.io/components/binary_sensor/status.html
binary_sensor:
  - platform: status
    name: ${name}_status 
    
switch:
  - platform: restart
    name: ${name}_restart
    id: ${name}_restart    

# Sensor:  https://esphome.io/components/sensor/index.html
sensor:
  # WiFi
  - platform: wifi_signal
    id: ${name}_wifi_power
    name: ${name}_wifi_power
    update_interval: 10s
  
  - platform: copy # Reports the WiFi signal strength in %
    source_id: ${name}_wifi_power
    name: ${name}_wifi_power_percent
    filters:
      - lambda: 'return min(max(2 * (x + 100.0), 0.0), 100.0);'
    unit_of_measurement: '%'
    entity_category: diagnostic
    
  - platform: internal_temperature
    name: ${name}_internal_temperature
    entity_category: diagnostic
   
  # Uptime
  - platform: uptime
    id: uptime_sec  
  
text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${name}_ip_address
    ssid:
      name: ${name}_connected_ssid
    bssid:
      name: ${name}_connected_bssid
    mac_address:
      name: ${name}_mac_wifi_address
    scan_results:
      name: ${name}_latest_scan_results
    dns_address:
      name: ${name}_dns_address

  - platform: template
    name: ${name}_uptime
    lambda: |-
      int seconds = (id(uptime_sec).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600); 
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      if ( days ) {
        return { (std::to_string(days) +"d " + std::to_string(hours) +"h " + std::to_string(minutes) +"m "+ std::to_string(seconds) +"s ").c_str() };
      } else if ( hours ) {
        return { (std::to_string(hours) +"h " + std::to_string(minutes) +"m "+ std::to_string(seconds) +"s ").c_str() };
      } else if ( minutes ) {
        return { (std::to_string(minutes) +"m "+ std::to_string(seconds) +"s ").c_str() };
      } else {
        return { (std::to_string(seconds) +"s ").c_str() };
      }
    icon: mdi:clock-start
    update_interval: 113s
    
# Time: https://esphome.io/components/time.html
time:
  platform: homeassistant
  id: homeassistant_time  