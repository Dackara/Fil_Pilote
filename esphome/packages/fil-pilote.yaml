select:
  - platform: template
    name: "${fp1_name} Mode"
    id: ${fp1_id}_mode
    options:
     - "Confort"    #Pas de signal envoyé
     - "Eco"        #Alternance pleine
     - "Hors-gel"   #Alternance négative
     - "Arrêt"      #Alternance positive
     - "Confort -1" #Alternance pleine temporisé (4'57"off/3"on/..)
     - "Confort -2" #Alternance pleine temporisé (4'53"off/7"on/..)
    initial_option: "Confort"
    optimistic: true
    set_action:
      - logger.log:
          format: "Chosen option: %s"
          args: ["x.c_str()"]
      - lambda: |-
          id(${fp1_id}_mode).state = x.c_str(); 
    on_value:
      then:
        - if:
            condition:
              - lambda: |- 
                  return id(${fp1_id}_mode).state == "Confort" ;
            then:
              - switch.turn_off: ${fp1_id}_positif
              - switch.turn_off: ${fp1_id}_negatif
        - if:
            condition:
              - lambda: |- 
                  return id(${fp1_id}_mode).state == "Eco" ;
            then:
              - switch.turn_on: ${fp1_id}_positif
              - switch.turn_on: ${fp1_id}_negatif
        - if:
            condition:
              - lambda: |- 
                  return id(${fp1_id}_mode).state == "Hors-gel" ;
            then:
              - switch.turn_off: ${fp1_id}_positif
              - switch.turn_on: ${fp1_id}_negatif
        - if:
            condition:
              - lambda: |- 
                  return id(${fp1_id}_mode).state == "Arrêt" ;
            then:
              - switch.turn_on: ${fp1_id}_positif
              - switch.turn_off: ${fp1_id}_negatif
        - while:
            condition:
              - lambda: |- 
                  return id(${fp1_id}_mode).state == "Confort -1" ;
            then:
              - switch.turn_off: ${fp1_id}_positif
              - switch.turn_off: ${fp1_id}_negatif
              - delay: 
                  minutes: 4
                  seconds: 57
              - switch.turn_on: ${fp1_id}_positif
              - switch.turn_on: ${fp1_id}_negatif
              - delay: 3s
        - while:
            condition:
              - lambda: |- 
                  return id(${fp1_id}_mode).state == "Confort -2" ;
            then:
              - switch.turn_off: ${fp1_id}_positif
              - switch.turn_off: ${fp1_id}_negatif
              - delay: 
                  minutes: 4
                  seconds: 53
              - switch.turn_on: ${fp1_id}_positif
              - switch.turn_on: ${fp1_id}_negatif
              - delay: 7s
      
  - platform: template
    name: "${fp2_name} Mode"
    id: ${fp2_id}_mode
    options:
     - "Confort"    #Pas de signal envoyé
     - "Eco"        #Alternance pleine
     - "Hors-gel"   #Alternance négative
     - "Arrêt"      #Alternance positive
     - "Confort -1" #Alternance pleine temporisé (4'57"off/3"on/..)
     - "Confort -2" #Alternance pleine temporisé (4'53"off/7"on/..)
    initial_option: "Confort"
    optimistic: true
    set_action:
      - logger.log:
          format: "Chosen option: %s"
          args: ["x.c_str()"]
      - lambda: |-
          id(${fp2_id}_mode).state = x.c_str(); 
    on_value:
      then:
        - if:
            condition:
              - lambda: |- 
                  return id(${fp2_id}_mode).state == "Confort" ;
            then:
              - switch.turn_off: ${fp2_id}_positif
              - switch.turn_off: ${fp2_id}_negatif
        - if:
            condition:
              - lambda: |- 
                  return id(${fp2_id}_mode).state == "Eco" ;
            then:
              - switch.turn_on: ${fp2_id}_positif
              - switch.turn_on: ${fp2_id}_negatif
        - if:
            condition:
              - lambda: |- 
                  return id(${fp2_id}_mode).state == "Hors-gel" ;
            then:
              - switch.turn_off: ${fp2_id}_positif
              - switch.turn_on: ${fp2_id}_negatif
        - if:
            condition:
              - lambda: |- 
                  return id(${fp2_id}_mode).state == "Arrêt" ;
            then:
              - switch.turn_on: ${fp2_id}_positif
              - switch.turn_off: ${fp2_id}_negatif
        - while:
            condition:
              - lambda: |- 
                  return id(${fp2_id}_mode).state == "Confort -1" ;
            then:
              - switch.turn_off: ${fp2_id}_positif
              - switch.turn_off: ${fp2_id}_negatif
              - delay: 
                  minutes: 4
                  seconds: 57
              - switch.turn_on: ${fp2_id}_positif
              - switch.turn_on: ${fp2_id}_negatif
              - delay: 3s
        - while:
            condition:
              - lambda: |- 
                  return id(${fp2_id}_mode).state == "Confort -2" ;
            then:
              - switch.turn_off: ${fp2_id}_positif
              - switch.turn_off: ${fp2_id}_negatif
              - delay: 
                  minutes: 4
                  seconds: 53
              - switch.turn_on: ${fp2_id}_positif
              - switch.turn_on: ${fp2_id}_negatif
              - delay: 7s        
              
  - platform: template
    name: "${fp3_name} Mode"
    id: ${fp3_id}_mode
    options:
     - "Confort"    #Pas de signal envoyé
     - "Eco"        #Alternance pleine
     - "Hors-gel"   #Alternance négative
     - "Arrêt"      #Alternance positive
     - "Confort -1" #Alternance pleine temporisé (4'57"off/3"on/..)
     - "Confort -2" #Alternance pleine temporisé (4'53"off/7"on/..)
    initial_option: "Confort"
    optimistic: true
    set_action:
      - logger.log:
          format: "Chosen option: %s"
          args: ["x.c_str()"]
      - lambda: |-
          id(${fp3_id}_mode).state = x.c_str(); 
    on_value:
      then:
        - if:
            condition:
              - lambda: |- 
                  return id(${fp3_id}_mode).state == "Confort" ;
            then:
              - switch.turn_off: ${fp3_id}_positif
              - switch.turn_off: ${fp3_id}_negatif
        - if:
            condition:
              - lambda: |- 
                  return id(${fp3_id}_mode).state == "Eco" ;
            then:
              - switch.turn_on: ${fp3_id}_positif
              - switch.turn_on: ${fp3_id}_negatif
        - if:
            condition:
              - lambda: |- 
                  return id(${fp3_id}_mode).state == "Hors-gel" ;
            then:
              - switch.turn_off: ${fp3_id}_positif
              - switch.turn_on: ${fp3_id}_negatif
        - if:
            condition:
              - lambda: |- 
                  return id(${fp3_id}_mode).state == "Arrêt" ;
            then:
              - switch.turn_on: ${fp3_id}_positif
              - switch.turn_off: ${fp3_id}_negatif
        - while:
            condition:
              - lambda: |- 
                  return id(${fp3_id}_mode).state == "Confort -1" ;
            then:
              - switch.turn_off: ${fp3_id}_positif
              - switch.turn_off: ${fp3_id}_negatif
              - delay: 
                  minutes: 4
                  seconds: 57
              - switch.turn_on: ${fp3_id}_positif
              - switch.turn_on: ${fp3_id}_negatif
              - delay: 3s
        - while:
            condition:
              - lambda: |- 
                  return id(${fp3_id}_mode).state == "Confort -2" ;
            then:
              - switch.turn_off: ${fp3_id}_positif
              - switch.turn_off: ${fp3_id}_negatif
              - delay: 
                  minutes: 4
                  seconds: 53
              - switch.turn_on: ${fp3_id}_positif
              - switch.turn_on: ${fp3_id}_negatif
              - delay: 7s        
           
  - platform: template
    name: "${fp4_name} Mode"
    id: ${fp4_id}_mode
    options:
     - "Confort"    #Pas de signal envoyé
     - "Eco"        #Alternance pleine
     - "Hors-gel"   #Alternance négative
     - "Arrêt"      #Alternance positive
     - "Confort -1" #Alternance pleine temporisé (4'57"off/3"on/..)
     - "Confort -2" #Alternance pleine temporisé (4'53"off/7"on/..)
    initial_option: "Confort"
    optimistic: true
    set_action:
      - logger.log:
          format: "Chosen option: %s"
          args: ["x.c_str()"]
      - lambda: |-
          id(${fp4_id}_mode).state = x.c_str(); 
    on_value:
      then:
        - if:
            condition:
              - lambda: |- 
                  return id(${fp4_id}_mode).state == "Confort" ;
            then:
              - switch.turn_off: ${fp4_id}_positif
              - switch.turn_off: ${fp4_id}_negatif
        - if:
            condition:
              - lambda: |- 
                  return id(${fp4_id}_mode).state == "Eco" ;
            then:
              - switch.turn_on: ${fp4_id}_positif
              - switch.turn_on: ${fp4_id}_negatif
        - if:
            condition:
              - lambda: |- 
                  return id(${fp4_id}_mode).state == "Hors-gel" ;
            then:
              - switch.turn_off: ${fp4_id}_positif
              - switch.turn_on: ${fp4_id}_negatif
        - if:
            condition:
              - lambda: |- 
                  return id(${fp4_id}_mode).state == "Arrêt" ;
            then:
              - switch.turn_on: ${fp4_id}_positif
              - switch.turn_off: ${fp4_id}_negatif
        - while:
            condition:
              - lambda: |- 
                  return id(${fp4_id}_mode).state == "Confort -1" ;
            then:
              - switch.turn_off: ${fp4_id}_positif
              - switch.turn_off: ${fp4_id}_negatif
              - delay: 
                  minutes: 4
                  seconds: 57
              - switch.turn_on: ${fp4_id}_positif
              - switch.turn_on: ${fp4_id}_negatif
              - delay: 3s
        - while:
            condition:
              - lambda: |- 
                  return id(${fp4_id}_mode).state == "Confort -2" ;
            then:
              - switch.turn_off: ${fp4_id}_positif
              - switch.turn_off: ${fp4_id}_negatif
              - delay: 
                  minutes: 4
                  seconds: 53
              - switch.turn_on: ${fp4_id}_positif
              - switch.turn_on: ${fp4_id}_negatif
              - delay: 7s        
              
switch:
  - platform: gpio
    name: "${fp1_name} Alternance Positive"
    pin:
      sx1509: ${sx1509_fp}
      # Use pin number 0 or 8
      number: ${fp1_pos_gpio}
      mode:
        output: true
      inverted: true
    id: ${fp1_id}_positif
      
  - platform: gpio
    name: "${fp1_name} Alternance Négative"
    pin:
      sx1509: ${sx1509_fp}
      # Use pin number 1 or 9
      number: ${fp1_neg_gpio}
      mode:
        output: true
      inverted: true
    id: ${fp1_id}_negatif
    
  - platform: gpio
    name: "${fp2_name} Alternance Positive"
    pin:
      sx1509: ${sx1509_fp}
      # Use pin number 2 or 10
      number: ${fp2_pos_gpio}
      mode:
        output: true
      inverted: true
    id: ${fp2_id}_positif
    
  - platform: gpio
    name: "${fp2_name} Alternance Négative"
    pin:
      sx1509: ${sx1509_fp}
      # Use pin number 3 or 11
      number: ${fp2_neg_gpio}
      mode:
        output: true
      inverted: true
    id: ${fp2_id}_negatif
    
  - platform: gpio
    name: "${fp3_name} Alternance Positive"
    pin:
      sx1509: ${sx1509_fp}
      # Use pin number 4 or 12
      number: ${fp3_pos_gpio}
      mode:
        output: true
      inverted: true
    id: ${fp3_id}_positif
    
  - platform: gpio
    name: "${fp3_name} Alternance Négative"
    pin:
      sx1509: ${sx1509_fp}
      # Use pin number 5 or 13
      number: ${fp3_neg_gpio}
      mode:
        output: true
      inverted: true 
    id: ${fp3_id}_negatif
    
  - platform: gpio
    name: "${fp4_name} Alternance Positive"
    pin:
      sx1509: ${sx1509_fp}
      # Use pin number 6 or 14
      number: ${fp4_pos_gpio}
      mode:
        output: true
      inverted: true 
    id: ${fp4_id}_positif
    
  - platform: gpio
    name: "${fp4_name} Alternance Négative"
    pin:
      sx1509: ${sx1509_fp}
      # Use pin number 7 or 15
      number: ${fp4_neg_gpio}
      mode:
        output: true
      inverted: true 
    id: ${fp4_id}_negatif
      
